/*
https://leetcode.com/problems/kth-ancestor-of-a-tree-node/
*/
class TreeAncestor {
    int N;
    int[] tin;
    int[] tout;
    int[][] parents;
    int time;
    int l;
    Map<Integer, List<Integer>> graph;
    
    public TreeAncestor(int n, int[] parent) {
        N = n;
        preprocess(parent);
    }
    
    
    public int getKthAncestor(int node, int k) {
        
        for(int i = l; i >= 0; i--) {
            int mask = (1 << i);
            if((mask & k) != 0) {
                node = parents[node][i];
                k -= mask;
            }
            
            if(node == -1) {
                break;
            }
        }
        return node;
    }
    
    
    private int log2(int n) {
        return (int)(Math.log(n) / Math.log(2));
    }
    
    
    private void preprocess(int[] parent) {
        time = 0;
        tin = new int[N];
        tout = new int[N];
        l = log2(N);
        parents = new int[N][l+1];
        
        graph = new HashMap<>();
        
        for(int u = -1; u < N; u++) {    
            graph.put(u, new ArrayList<>());
        }
        
        for(int u = 0; u < N; u++) {
            int p = parent[u];
            graph.get(p).add(u);
            graph.get(u).add(p);
        }
        
        dfs(0, -1);
        
        for(int k = 1; k <= l; k++) {
            for(int u = 0; u < N; u++) {
                if(parents[u][k-1] == -1) {
                    parents[u][k] = -1;
                } else {
                    parents[u][k] = parents[parents[u][k-1]][k-1];
                }
            }
        }
    }
    
    
    private void dfs(int u, int p) {
        
        parents[u][0] = p;
        
        if(u == -1) {
            return;
        }
        time++;
        tin[u] = time;
        
        for(int child : graph.get(u)) {
            if(child != p) {
                dfs(child, u);
            }
        }
        
        tout[u] = time;
    }
    
}

/**
 * Your TreeAncestor object will be instantiated and called as such:
 * TreeAncestor obj = new TreeAncestor(n, parent);
 * int param_1 = obj.getKthAncestor(node,k);
 */
